// 5/9/25
// Weijun Zheng, Warren Truong, Ben Carrico, Nicholas Johnson
// High water level state turns on the fan
// Fan goes off if water level not meet

#include <LiquidCrystal.h>
#include <Stepper.h>
#include <RTClib.h>
#include <DHT.h>
#include <avr/io.h>
#include <avr/interrupt.h>

// ---------- user constants ----------  
// All the pins needed
#define REV_STEPS      2038           // 28BYJ‑48
#define FAN_MASK       (1 << PB4)     // pin 10
#define START_BTN      (1 << PB3)     // pin 50
#define RESET_BTN      (1 << PB2)     // pin 51
#define CTRL_BTN       (1 << PB1)     // pin 52
const uint16_t TEMP_ON_F   = 50;      // fan/stepper threshold
const uint16_t WTR_THRESH  = 200;     // raw ADC low‑water limit
const uint16_t temp_threshold = 50;   // fan / RUN state trigger (°F)

/* ── water‑level hysteresis ── */
const uint16_t HIGH_WTR = 250;  // probe must read ≥ 250 to be “OK”
const uint16_t LOW_WTR  = 200;  // only drop back to ERROR when < 200 red light

// ---------- objects ----------  
// pins
LiquidCrystal lcd(12,11,6,5,4,3);
Stepper stepper(REV_STEPS, 28,26,24,22);
DHT dht(7, DHT11);
RTC_DS3231 rtc;

// ---------- state / globals ---------- 
// state of the fan
enum STATE {DISABLED, IDLE, ERROR, RUNNING};
STATE  state = DISABLED, prevState = DISABLED;
uint32_t ms  = 0;
uint16_t water = 0;

// ---------- LED bit‑map (pins 30/32/34/36) ---------- 
const uint8_t STATE_LED[4] = {
  0x80,   // PC7  pin 30  DISABLED  (Y)
  0x20,   // PC5  pin 32  IDLE      (G)
  0x08,   // PC3  pin 34  ERROR     (R)
  0x02    // PC1  pin 36  RUNNING   (B)
};

// ---------- ADC helper ---------- 
uint16_t adcRead(uint8_t ch)
{
  ADMUX  = (1 << REFS0) | (ch & 0x07);
  ADCSRA |= (1 << ADSC);
  while (ADCSRA & (1 << ADSC));
  return ADC;
}

// ---------- millis (1 ms) using Timer‑2 ---------- 
ISR(TIMER2_COMPA_vect) { ++ms; }

// ---------- setup ---------- 
void setup()
{
  lcd.begin(16,2);
  dht.begin();
  rtc.begin();
  stepper.setSpeed(10);

  // I/O 
  DDRC  |= 0xAA;                        // PC1,3,5,7 output (state LEDs)
  DDRB  |= FAN_MASK;                    // fan output
  DDRB  &= ~(START_BTN|RESET_BTN|CTRL_BTN);
  PORTB |=  (START_BTN|RESET_BTN|CTRL_BTN); // pull‑ups
  
  // ADC prescaler / enable 
  ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);

  // Timer‑2 → 1 kHz ISR for ms counter 
  TCCR2A = (1<<WGM21);
  TCCR2B = (1<<CS22);                   // 16 MHz /64
  OCR2A  = 249;                         // 1 ms
  TIMSK2 = (1<<OCIE2A);
  sei();

  lcd.print("System Ready");
}

// ---------- main loop ---------- 
void loop()
{
  // ── read sensors once / s ── 
  static uint32_t lastSens=0;
  if (ms - lastSens >= 1000) {
    lastSens = ms;

    // read sensors 
    water = adcRead(0);
    float tempF = dht.readTemperature(true);
    float hum   = dht.readHumidity();        // ✅ NEW: read humidity

    // ---------- water‑level with hysteresis ---------- 
    if (state != ERROR && water < LOW_WTR)   state = ERROR;
    if (state == ERROR  && water >= HIGH_WTR) state = IDLE;


    // ---------- temperature state change ---------- 
    if (state == IDLE    && tempF >= TEMP_ON_F) state = RUNNING;
    if (state == RUNNING && tempF <  TEMP_ON_F) state = IDLE;

    // ---------- humidity state change ---------- 
    if (state == IDLE    && hum >= 50) state = RUNNING;
    if (state == RUNNING && hum <  50) state = IDLE;



    // ---------- LCD row 1: temperature + water ---------- 
    lcd.setCursor(0,0);
    lcd.print("T:");  lcd.print((int)tempF); lcd.print("F ");
    lcd.print("W:");  lcd.print(water);   lcd.print("   ");

    // ---------- LCD row 2: humidity + state label ---------- 
    lcd.setCursor(0,1);
    lcd.print("H:"); lcd.print((int)hum); lcd.print("% ");
    lcd.print(state == RUNNING ? "RUN" :
              state == IDLE    ? "IDLE" :
              state == ERROR   ? "ERR" : "OFF");
  }

  // ── button handling (polling) ── 
  if (!(PINB & START_BTN)) {
    while (!(PINB & START_BTN));
    if (state == DISABLED) {
        state = IDLE;
        lcd.clear(); lcd.print("START → IDLE");
    }
    //delay(250);
}

  if (!(PINB & RESET_BTN)) {            // RESET stops system
    while (!(PINB & RESET_BTN));      // wait for release
    state = DISABLED;                 // force system OFF
    PORTB &= ~FAN_MASK;               // ensure fan is OFF
    lcd.clear(); lcd.print("RESET: DISABLED");
    //delay(250);
}


  if (!(PINB & CTRL_BTN)) {             // turn vent
    while (!(PINB & CTRL_BTN));
    lcd.clear(); lcd.print("Vent turning...");
    stepper.step(REV_STEPS);
    lcd.setCursor(0,1);  lcd.print("Done");
    //delay(250);
  }

  // ── state actions ── 
  switch (state)
  {
    case DISABLED:
      PORTB &= ~FAN_MASK;
      break;

    case IDLE:
      PORTB &= ~FAN_MASK;
      break;

    case RUNNING:
      PORTB |= FAN_MASK;                // fan ON
      break;

    case ERROR:
      PORTB &= ~FAN_MASK;
      break;
  }

  //── update LEDs if state changed ──
  if (state != prevState) {
    PORTC  = STATE_LED[state];
    lcd.clear();
    lcd.print(state==ERROR ? "LOW WATER!" :
              state==RUNNING ? "Fan ON" :
              state==IDLE ? "Idle" : "Disabled");
    prevState = state;
  }
}
